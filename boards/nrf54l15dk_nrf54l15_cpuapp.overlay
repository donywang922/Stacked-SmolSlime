&pinctrl {
	i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 1, 5)>,
				<NRF_PSEL(TWIM_SCL, 1, 7)>;
		};
	};

	i2c0_sleep: i2c0_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 1, 5)>,
				<NRF_PSEL(TWIM_SCL, 1, 7)>;
			low-power-enable;
		};
	};

};

&pwm20_default {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 1, 10)>,
			<NRF_PSEL(PWM_OUT1, 1, 14)>;
	};
};

&pwm20_sleep {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 1, 10)>,
			<NRF_PSEL(PWM_OUT1, 1, 14)>;
	};
};

/ {
	pwmleds {
		pwm_led0: pwm_led_0 {
			pwms = <&pwm20 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
		};
	};

	battery-divider {
		compatible = "voltage-divider";
		status = "okay";
		io-channels = <&adc 12>; // Measure VDDHDIV5
		output-ohms = <1>;
		full-ohms = <2>;
	};
};

&i2c20 {
	compatible = "nordic,nrf-twim";
	status = "okay";
	zephyr,concat-buf-size = <1023>;
	zephyr,flash-buf-max-size = <1023>;
	clock-frequency = <I2C_BITRATE_FAST>;
	pinctrl-0 = <&i2c0_default>;
	pinctrl-1 = <&i2c0_sleep>;
	pinctrl-names = "default", "sleep";

	imu: imu@0 { // any address out of range (00, 7f, etc. will search all addresses and stored address first if available, specify an address here to search first otherwise
		compatible = "i2c-device";
		label = "imu";
		reg = <0>;
	};

	mag: mag@0 {
		compatible = "i2c-device";
		label = "mag";
		reg = <0>;
	};

};

&uart20 {
	status = "disabled";
};
