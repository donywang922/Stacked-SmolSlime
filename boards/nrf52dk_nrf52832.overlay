&pwm0_default {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 0, 13)>,
			<NRF_PSEL(PWM_OUT1, 0, 14)>,
			<NRF_PSEL(PWM_OUT2, 0, 15)>;
		nordic,drive-mode = <NRF_DRIVE_D0S1>;
		nordic,invert;
	};
};

&pwm0_sleep {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 0, 13)>,
			<NRF_PSEL(PWM_OUT1, 0, 14)>,
			<NRF_PSEL(PWM_OUT2, 0, 15)>;
	};
};

/ {
	pwmleds {
		pwm_led1: pwm_led_1 {
			pwms = <&pwm0 1 PWM_MSEC(20) PWM_POLARITY_INVERTED>;
		};
		pwm_led2: pwm_led_2 {
			pwms = <&pwm0 2 PWM_MSEC(20) PWM_POLARITY_INVERTED>;
		};
	};

	battery-divider {
		compatible = "voltage-divider";
		status = "okay";
		io-channels = <&adc 12>; // Measure VDDHDIV5
		output-ohms = <1>;
		full-ohms = <2>;
	};

	aliases {
		pwm-led1 = &pwm_led1;
		pwm-led2 = &pwm_led2;
	};
};

&i2c0 {
	compatible = "nordic,nrf-twim";
	zephyr,concat-buf-size = <255>; // MAXCNT
	zephyr,flash-buf-max-size = <255>;
	clock-frequency = <I2C_BITRATE_FAST>;

	imu: imu@0 { // any address out of range (00, 7f, etc. will search all addresses and stored address first if available, specify an address here to search first otherwise
		compatible = "i2c-device";
		label = "imu";
		reg = <0>;
	};

	mag: mag@0 {
		compatible = "i2c-device";
		label = "mag";
		reg = <0>;
	};

};

arduino_spi: &spi2 {
	imu_spi: imu_spi@0 {
		compatible = "vnd,spi-device";
		spi-max-frequency = <DT_FREQ_M(8)>;
		label = "imu-spi";
		reg = <0>;
	};
};
